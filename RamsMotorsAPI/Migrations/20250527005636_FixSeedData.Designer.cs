// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RamsMotorsAPI.Data;

#nullable disable

namespace RamsMotorsAPI.Migrations
{
    [DbContext(typeof(RamsMotorsDbContext))]
    [Migration("20250527005636_FixSeedData")]
    partial class FixSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("RamsMotorsAPI.Models.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("admin_users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@ramsmotors.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "$2a$11$KBpNwTNNgL.zLBZKnmNBf.p3CzW/jIW0XkFk7KZFu0Vjn6RE.2rZW",
                            Role = "admin",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.Vehicle", b =>
                {
                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("TEXT")
                        .HasColumnName("vin");

                    b.Property<string>("BodyStyle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("body_style");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("color");

                    b.Property<string>("ConditionReport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition_report");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Drivetrain")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("drivetrain");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("engine");

                    b.Property<string>("ExteriorColor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("exterior_color");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fuel_type");

                    b.Property<string>("InteriorColor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("interior_color");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_available");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("make");

                    b.Property<int>("Mileage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("transmission");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("VIN");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("Make");

                    b.HasIndex("Mileage");

                    b.HasIndex("Model");

                    b.HasIndex("Price");

                    b.HasIndex("Year");

                    b.HasIndex("Make", "Model");

                    b.ToTable("vehicles");

                    b.HasData(
                        new
                        {
                            VIN = "1HGBH41JXMN109186",
                            BodyStyle = "Sedan",
                            Color = "Silver",
                            ConditionReport = "Excellent condition, no accidents, regular maintenance",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "One owner, excellent condition Honda Civic with low mileage.",
                            Drivetrain = "FWD",
                            Engine = "2.0L 4-Cylinder",
                            ExteriorColor = "Lunar Silver Metallic",
                            Features = "Apple CarPlay, Android Auto, Honda Sensing Safety Suite, LED Headlights",
                            FuelType = "Gasoline",
                            InteriorColor = "Black",
                            IsAvailable = true,
                            Make = "Honda",
                            Mileage = 15000,
                            Model = "Civic",
                            Price = 28500.00m,
                            Transmission = "CVT",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Year = 2023
                        },
                        new
                        {
                            VIN = "1C4HJXDG5MW123456",
                            BodyStyle = "SUV",
                            Color = "Black",
                            ConditionReport = "Very good condition, minor wear on driver seat",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Loaded Grand Cherokee with premium features and capability.",
                            Drivetrain = "4WD",
                            Engine = "3.6L V6",
                            ExteriorColor = "Diamond Black Crystal",
                            Features = "Uconnect 4C NAV, Panoramic Sunroof, Premium Audio, Heated Seats",
                            FuelType = "Gasoline",
                            InteriorColor = "Black/Light Frost",
                            IsAvailable = true,
                            Make = "Jeep",
                            Mileage = 28000,
                            Model = "Grand Cherokee",
                            Price = 45999.00m,
                            Transmission = "8-Speed Automatic",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Year = 2022
                        },
                        new
                        {
                            VIN = "1FA6P8TH8L5123789",
                            BodyStyle = "Coupe",
                            Color = "Red",
                            ConditionReport = "Good condition, adult driven, garage kept",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Powerful Mustang GT with the legendary 5.0L V8 engine.",
                            Drivetrain = "RWD",
                            Engine = "5.0L V8",
                            ExteriorColor = "Race Red",
                            Features = "SYNC 3, Premium Audio, Performance Package, Brembo Brakes",
                            FuelType = "Gasoline",
                            InteriorColor = "Ebony",
                            IsAvailable = true,
                            Make = "Ford",
                            Mileage = 22000,
                            Model = "Mustang",
                            Price = 35750.00m,
                            Transmission = "10-Speed Automatic",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Year = 2021
                        });
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.VehicleImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("alt_text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("image_path");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_primary");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("uploaded_at");

                    b.Property<string>("VehicleVIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_vin");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("VehicleVIN");

                    b.ToTable("vehicle_images");
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.VehicleVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("display_order");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("uploaded_at");

                    b.Property<string>("VehicleVIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_vin");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("video_path");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("VehicleVIN");

                    b.ToTable("vehicle_videos");
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.VehicleImage", b =>
                {
                    b.HasOne("RamsMotorsAPI.Models.Vehicle", "Vehicle")
                        .WithMany("Images")
                        .HasForeignKey("VehicleVIN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.VehicleVideo", b =>
                {
                    b.HasOne("RamsMotorsAPI.Models.Vehicle", "Vehicle")
                        .WithMany("Videos")
                        .HasForeignKey("VehicleVIN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RamsMotorsAPI.Models.Vehicle", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
